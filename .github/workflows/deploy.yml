name: Deploy Multi-School Next.js App

on:
  push:

permissions:
  id-token: write
  contents: read

jobs:
  determine-env:
    name: Determine Workspace and Environment
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{ steps.set-env.outputs.workspace }}
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment and schools
        id: set-env
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "workspace=production" >> $GITHUB_OUTPUT
            echo "environment=Prod" >> $GITHUB_OUTPUT
          else
            echo "workspace=testing" >> $GITHUB_OUTPUT
            echo "environment=Dev" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy with Docker
    environment: Dev
    runs-on: ubuntu-latest
    needs: determine-env
    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO: "clockinclick"
      TERRAFORM_DIR: "terraform"
      WORKSPACE: ${{ needs.determine-env.outputs.workspace }}

    steps:
      - name: Debug environment
        run: |
          echo "Environment name: '${{ needs.determine-env.outputs.environment }}'"
      - name: Debug schools
        run: |
          echo "SCHOOLS: $SCHOOLS"
          echo "SCHOOLS_JSON: $(echo "[\"$(echo $SCHOOLS | sed 's/,/\",\"/g')\"]")"
          echo "Running in environment: $GITHUB_ENVIRONMENT"

      # Step 0: Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 1: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 4: Terraform init
      - name: Terraform Init
        run: terraform -chdir=${{ env.TERRAFORM_DIR }} init

      # Step 5: Create or ensure global ECR (only once, main branch)
      - name: Terraform Apply Global ECR
        if: github.ref == 'refs/heads/main'
        run: |
          terraform -chdir=${{ env.TERRAFORM_DIR }} apply \
            -auto-approve \
            -target=aws_ecr_repository.${ECR_REPO}

      # Step 6: Select or create Terraform workspace
      - name: Select Terraform workspace
        run: |
          terraform -chdir=${{ env.TERRAFORM_DIR }} workspace select $WORKSPACE || \
          terraform -chdir=${{ env.TERRAFORM_DIR }} workspace new $WORKSPACE
          echo "Using Terraform workspace: $WORKSPACE"

      # Step 7: Terraform apply environment-specific infra (DynamoDB + IAM)
      - name: Terraform Apply Environment Infra
        run: |
          # Convert comma-separated string into a Bash array
          IFS=',' read -ra SCHOOLS_ARRAY <<< "$SCHOOLS"
  
          # Generate JSON-style array for Terraform variable
          SCHOOLS_JSON=$(printf '%s\n' "${SCHOOLS_ARRAY[@]}" | jq -R . | jq -s .)
          
          # Initialize an empty string for all targets
          TARGETS=""
      
          # Loop through schools and add the resource addresses dynamically
          for school in "${SCHOOLS_ARRAY[@]}"; do
          TARGETS="$TARGETS -target=module.schools${school}.aws_dynamodb_table.users"
          TARGETS="$TARGETS -target=module.schools${school}.aws_dynamodb_table.time_attendance"
          TARGETS="$TARGETS -target=module.schools${school}.aws_iam_role.apprunner_role"
          TARGETS="$TARGETS -target=module.schools${school}.aws_iam_policy.apprunner_policy"
          TARGETS="$TARGETS -target=module.schools${school}.aws_iam_role_policy_attachment.apprunner_role_attach"
          done
          
          terraform -chdir=${{ env.TERRAFORM_DIR }} apply \
            -auto-approve \
            -var="schools=${SCHOOLS_JSON}" \
            $TARGETS

      # Step 8: Login to ECR
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Step 9: Build & push Docker images per school
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
          install: true
          
      - name: Enable Docker BuildKit
        run: |
          export DOCKER_BUILDKIT=1
          export BUILDKIT_PROGRESS=plain

      - name: Build and Push Docker Images (Parallel)
        run: |
          chmod +x scripts/build-school.sh
          ./scripts/build-school.sh
        env:
          PARALLEL_LIMIT: 4
          SCHOOLS: ${{ env.SCHOOLS }}

      # Step 10: Terraform apply App Runner + Route 53
      - name: Terraform Apply App Runner + Route53
        run: |
          # Convert comma-separated string into a Bash array
          IFS=',' read -ra SCHOOLS_ARRAY <<< "$SCHOOLS"
          
          # Generate JSON-style array for Terraform variable
          SCHOOLS_JSON=$(printf '%s\n' "${SCHOOLS_ARRAY[@]}" | jq -R . | jq -s .)
          
          # Initialize an empty string for all targets
          TARGETS=""
          
          # Loop through schools and add the resource addresses dynamically
          for school in "${SCHOOLS_ARRAY[@]}"; do
          TARGETS="$TARGETS -target=module.schools${school}.aws_apprunner_service.service"
          TARGETS="$TARGETS -target=module.schools${school}.aws_apprunner_custom_domain_association.domain"
          TARGETS="$TARGETS -target=module.schools${school}.aws_route53_record.school_subdomain"
          done
          
          terraform -chdir=${{ env.TERRAFORM_DIR }} apply \
            -auto-approve \
            -var="schools=${SCHOOLS_JSON}" \
            $TARGETS

      # Step 11: Terraform apply cert validation
      - name: Terraform Apply Certificate Validation
        run: |
          # Convert comma-separated string into a Bash array
          IFS=',' read -ra SCHOOLS_ARRAY <<< "$SCHOOLS"
          
          # Generate JSON-style array for Terraform variable
          SCHOOLS_JSON=$(printf '%s\n' "${SCHOOLS_ARRAY[@]}" | jq -R . | jq -s .)
          
          # Initialize an empty string for all targets
          TARGETS=""
          
          # Loop through schools and add the resource addresses dynamically
          for school in "${SCHOOLS_ARRAY[@]}"; do
          TARGETS="$TARGETS -target=module.schools${school}.aws_route53_record.validation"
          done
          
          terraform -chdir=${{ env.TERRAFORM_DIR }} apply \
            -auto-approve \
            -var="schools=${SCHOOLS_JSON}" \
            $TARGETS